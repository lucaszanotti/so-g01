#    SPDX-FileCopyrightText: 2021 Monaco F. J. <monaco@usp.br>
#    SPDX-FileCopyrightText: 2024 Lucas Zanotti <lucas.zanotti@usp.br>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later
#
#  This file is a derivative work from SYSeg (https://gitlab.com/monaco/syseg)
#  and contains modifications carried out by the following author(s):
#  Lucas Zanotti <lucas.zanotti@usp.br>

 BootCmd : Boot Command
 ==============================
 
 BootCmd is a very simple command-line interpreter that fits entirely
 within the first 512-byte sector of a USB stick. It is meant to be loaded by
 the BIOS legacy boot method and execute in x86 real-mode.

 Currently, the program implements only a single built-in command 'help'.

 Challenge
 ------------------------------

1) Build and execute BootCmd:

   make
   make bcmd.bin/run

2) Take some time to understand the program source.

   The file 'main.c' contains the the main program, in plain C.

   Observe that the 'main' function calls some auxiliary functions implemented
   using BIOS services. Those functions are conveniently written in assembly in
   the source file 'bios.S'
   
   The 'strcmp' function, on the other hand, can be written in plain C, and is
   implemented in the file 'utils.c'.
   
   The program is linked using the linker script 'bcmd.ld', that takes care of
   the static relocation to match the load address, ensemble the relevant
   object sections into a flat binary, and adds the boot signature.

   The linker scripts also prepends the program with 'rt0.o' (created from
   rt0.S), which performs the basic C runtime initialization, including the
   proper  initialization of registers and ensuring that 'main' is the entry
   function.

   For simplicity, all functions are assumed to implement the fastcall calling
   convention, which means that function arguments, if any, are passed through
   registers %cx and %dx, and that return values are passed back to caller
   using register %ax.

   Go through the 'Makefile' script to see how each component is built from its
   source. Consult gcc manual if needed to recall the command-line compiler
   options (we use flag '-Os' with 'utils.o' to optimize for size).
   

3) Implement a new built-in command.

   Think of a new command, such as to return the current date, print the
   available RAM memory, draw some cool graphics using video memory...
   or anything else you feel like.

   You may write your function in either assembly or C, whatever seems easier
   depending on the functionality you chose to implement.

   If you start running out of memory (remember the 512-byte limitation), you
   may save some space replacing the 'strcmp' function in 'utils.c' with the
   handcrafted memory-optimized assembly counterpart found in 'opt.S' (edit
   the Makefile accordingly).

   To save even more space, you may get rid of the 'help' command, shorten
   strings, explore compact assembly idioms (e.g. 'xor %ax, %ax' rather than
   'mov $0, %ax') and doing manual bit twiddling.


 
 Directions for the exercise
 ------------------------------

 1) Create your project.

 Unless otherwise specified by your instructor (in case you are using this
 material as part of a trainning program), SYSeg suggests that you deliver the
 solution of your implementation challange by commiting your work into a Git
 repository.

 If you haven't aready done it yet, please go through the following steps;
 otherwise, skip this part and proceed directly to item (2).
 
 Create your remote mainstream repository as indicated by the instructor and
 git-clone it into your local development environment.

 If your repository name is, say, 'proj', then, to bootstrap your project, run
 this command at the shell prompt:
 
    $ <path-to-syseg>/tools/syseg-project <path-to-proj>

 Well done, your project directory should be now populated with some essential
 data files and auxiliary scripts that you should use to develop the
 implementation challange.

 Read the newly created 'README' file and proceed as indicated.

 2) Export the exercise files into your project directory.

 Say the exercise is in a directory named 'foo', under the SYSeg source tree.

 Within directory 'foo', execute the command:

    $ make export             

 The command should create a tarball containing the project files.

 Uncompress the tarball contents into your project directory:

    $ tar zxvf foo.tgz -C <path-to-proj> 
 
 That will create a directory '<path-to-proj>/foo'.

 Note: if you are ever requested to update the exercise files --- say, because
 your instructor has changed anything --- you can git-push SYSeg to fetch the
 latest changes, make-export your exercise, and uncompress it again into your
 project directory using the command

    $ tar zxvfk foo.tgz -C <path-to-proj>

 (Note the 'k' option that prevents tar from overwriting existing files.)

 To complete the programming exercise, proceed as indicated in both this file
 and the complementary comments in the exercise source code.

 **Attention** do not simply copy the SYSeg files to your project.
 
     Some programs, build scrips, configuration files etc. may be
     heavily dependent on other parts of SYSeg and have not being
     designed to work properly if not in conjunction with those
     other files. If you merely copy files, they may well be incomplete.
     The syseg-export program should be used to export the SYSeg code
     into a standalone bundle. The 'make export' rule will collect the
     required files, and possibly modify them as needed to work outside
     the SYSeg project tree. Moreover, syseg-export will also modify
     the copyright notices in the form suitable for a derivative work.

  Should you intend to reuse any other file from SYSeg, please use the command

     $ <path-to-syseg>/tools/syseg-export <input-file> <destination-directory>

  The scritpt will export SYSeg files in a format suitable to be reused by
  external projects.

 3) Develop the implementation challenge.

 Start by reading '<path-to-proj>/.tools/readme.md', which will walk you
 through the steps to develop the program exercise.

 It's very important that you follow the directions given in that guide, should
 you or your instructor expect to use the SYSeg automatic test and verification
 tools to evaluate your implementation.

 SYSeg provides scripts for creating new source files, export code from SYSeg
 to your project, handle copyright information and other tasks.

 Finally, deliver your project as instructed.

 Within the exercise directory you should find a file named  'SOLVING' or
 'NOTEBOOKÂ´, which you should use as a  laboratory notebook for you to explain
 how you solved the implementation challenge, including annotations about the
 results, limitations and difficulties you may have found.



 How to deliver the exercise
 ------------------------------
  
 If you're exploring the exercise as part of a training program, chances are
 that your instructor is following the delivery workflow suggested by SYSeg. If
 that is the case, then, when you're done with the activity, you should be
 asked to upload your work into a repository managed by a version-control
 system (VCS) --- most probably Git.

 For this purpose, you must have already created your online repository in the
 recommended platform (e.g. GitHub or GitLab), cloned it, and then copied the
 exercise files into the directory of your project using the proper helper
 scripts provided by SYSeg.
 
 To deliver your programming exercise just commit your changes and push them
 into to the mainstream repository.
 

 You may commit partial changes even before completing the exercise. That may
 be a convenient way to share ideas and ask for help. Opening an issue in the
 repository with your question may be an effective way to ask for help.
 

 When you believe your work is complete, mark your final revision with a
 tag. Unless the exercise specification informs differently, use the tag
 '<dir>-done', where '<dir>' is the name of the directory containing the
 project. If you need to submit a revision after that, use the
 tag '<dir>-rev1', '<dir>-rev2' and so on.
 
 To tag your delivery:

     $ git tag <dir>-done
     $ git push origin <dir>-done

 The instructor will know you are finished with the exercise.

 Note: please, commit only source files, i.e. don't commit object files and
 other items that can be generated by the build process).
  



 

 Bintools: convenience rules for inspecting binary files
 ------------------------------------------------------------
 
 SYSeg's Bintools is a collection of Makefile rules aimed as shortcut for
 invoking binary inspection utilities. It contains handy Make rules for
 disassembling objects, comparing files, creating bootable images, invoking
 platform emulators and other facilities. Some shortcuts are ad hoc rules
 crafted under poetic license and may depart from conventional Make usage.

 CONVENTIONS
 
 As a rule of thumb, a file named

     foo.bar            contains the working implementation
     foo-beta.bar	contains working but cumbersome/inelegant implementation
     foo-alpha.bar	contains incomplete or wrong implementation

 File extensions:

   -`hex`  ASCII file containing values in hexadecimal representation;

   -`asm`  manually written assembly code in Intel ASM format;

   -`S`    manually written assembly code in AT&T Gas format;

   -`s`    assembly code in AT&T Gas format generated by the compiler (gcc);

   -`o`    object code produced by the assembler;

   -`i`    pre-processed source code generated by the pre-processor (CPP)

   -`bin`  flat-binary file generated by the linker;

   -`iso`  ISO9660 (ECMA-119) file system intended for optical disk media (CD) 

   -`ld`   linker script (ld).


 Some examples allow alternative build recipes which can be selected
 by passing the command-line variable 'ALT=<number>' to 'make'. See bellow.

 NEEDED SOFTWARE

 In order to experiment with the examples in this section, the following
 pieces of software may be needed. The list indicates the lowest versions
 against which the project has been tested. Using a more recent version should
 be ok, but it is not absolutely guaranteed that results won't exhibit minor
 variations. Feedback is always appreciated.

 If required for a particular example, it is safe to use

 - Linux         5.13.0         (any decent ditribution)
 - gcc 	     	 9.3.0	        (the GNU compiler)
 - GNU binutils  2.34		(GNU assembler, linker, disassembler etc.) 
 - nasm		 2.14.02	(NASM assembler)
 - qemu		 4.2.1		(most probably qemu-system-i386)
 - gcc-multilib  9.3.0		(to compile 32-bit code in a 64-bit platform)
 - xorriso	 1.5.2-1	(depending on your computer's BIOS)
 - hexdump	 POSIX.2	(binary editor)
 
 CONVENIENCE RULES 


 * For building and inspecting binaries, use

   make					     Build the default target.

   make foo				     Build foo.

   make diss IMG=foo 			     Disassemble foo.

   	     	     			     Optionally,

					        ASM  = intel | att  (default)
						BIT  =    16 | 32   (default)

   make dump IMG=foo			     Show the raw contents of foo.
   
   make      			             Build everything (or make all)

   make clean			             Undo make all

   make diff foo bar baz		     Show graphical diff between files

   	     	     			     ASM and BIT variables apply


  * If any example involves the manipulation of a bootable image, use
  

   make run IMG=foo	             	     Run foo in the emulator

   make stick IMG=foo DEVICE=/dev/sdX        make a bootable USB stick


   SHORTCUTS

   For further convenience, the build script offers some ad hoc shortcuts:
   

   make foo/diss | foo/d		     disassemble .text as 32-bit AT&T

   make foo/diss intel|att		     disassemble as 32-bit Intel or AT&T
   make foo/diss 16|32			     disassemble as 16-bit or 32-bit
   make foo/diss intel|att 16|32	     disassemble as Intel|AT&T 16|32 bit
   make foo/diss 16|32 intel|att	     disassemble as Intel|AT&T 16|32 bit

   make foo/i16	       			     disassemble as Intel 16-bit
   make foo/a16 | foo/16  		     disassemble as AT&T  16-bit
   make foo/a32	| foo/32 | foo/a     	     disassemble as AT&T  32-bit
   make foo/i32	         | foo/i	     disassemble as Intel 32-bit

   		   			     In all disassembly rules, a
					     trailing '*' means disassemble all
					     sections, e.g. foo/d* foo/16* ...

   make foo/hex | foo/raw | foo/dump	     show raw contents in hexadecimal

   make foo/run				     test foo (mbr) with the emulator
   make foo/fd				     test foo (floppy) with the emulator

   make diffi16 | di16 | i16 foo bar baz     make diff with ASM=intel BIT=16
   make diffi32 | di32 | i32 foo bar baz     make diff with ASM=intel BIT=32
   make diffa16 | da16 | a16 foo bar baz     make diff with ASM=att BIT=16
   make diffa32 | da32 | a32 foo bar baz     make diff with ASM=att BIT=32

   make foo/stick dev    	   	     make stick IMG=foo DEVICE=dev

   make foo/l	  			     open foo in 'less' program

 

